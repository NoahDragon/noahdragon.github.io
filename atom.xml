<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Dream Navigator]]></title>
  <link href="http://abnerchou.me/atom.xml" rel="self"/>
  <link href="http://abnerchou.me/"/>
  <updated>2014-07-12T23:23:32-04:00</updated>
  <id>http://abnerchou.me/</id>
  <author>
    <name><![CDATA[Abner Chou]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Set Up VPN With Transparent Proxy on DigitalOcean]]></title>
    <link href="http://abnerchou.me/blog/2014/07/12/set-up-vpn-with-transparent-proxy-on-digitalocean/"/>
    <updated>2014-07-12T20:43:47-04:00</updated>
    <id>http://abnerchou.me/blog/2014/07/12/set-up-vpn-with-transparent-proxy-on-digitalocean</id>
    <content type="html"><![CDATA[<p>Recently I just rent a VPS on <a href="https://www.digitalocean.com">Digital Ocean</a>,
which is cheap for a student and who is price sensitive.
As it gives you all the controls of an OS, it likes a remote compute machine.
Meanwhile, you could do anything as you have your own server.</p>

<p>Therefore, it comes to my mind to create a VPN server.
VPN is a virtual private network that extends a private network across a public network,
which usually used to bypass firewalls or increase access speed.
Proxy is a server that acts as an intermediary for requests from clients seeking resources from other servers.
It needs to be set in software application&rsquo;s configuration.
VPN and Proxy both could hide your ip.
The differences between them are listed following:</p>

<table>
<thead>
<tr>
<th></th>
<th align="left">                  </th>
<th align="center">VPN                                                        </th>
<th align="center">Proxy                                         </th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td align="left">Protocols&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td align="center">Support any Protocols</td>
<td align="center">Support certain Protocols, such as HTTP, SOCKS</td>
</tr>
<tr>
<td></td>
<td align="left">Softwares         </td>
<td align="center">Any softwares that can run on the machine &nbsp;&nbsp;&nbsp;&nbsp;</td>
<td align="center">Softwares support proxy configuration</td>
</tr>
<tr>
<td></td>
<td align="left">Price             </td>
<td align="center">High if you rent from vpn provider</td>
<td align="center">Low</td>
</tr>
<tr>
<td></td>
<td align="left">Speed             </td>
<td align="center">Varies depend on number of users<br/>usually depends on servers </td>
<td align="center">Depend on servers</td>
</tr>
<tr>
<td></td>
<td align="left">Security          </td>
<td align="center">Encryption (128-bit to 2048-bit)</td>
<td align="center">Not encrypted</td>
</tr>
</tbody>
</table>


<br/>


<p>Because of the encryption, every accesses through VPN retrive the objects directly from the source.
This could slow down the user experience when hits a same object multiple times, such as icons in a webpage.
If there is a way that could cache web objects into VPN server, that will significantly increase the access speed, which get objects from local disk instead of downloading from source website.
Here, I should introduce the transparent proxy, which usually sets on the gateway and caches content from WWW requests.
It calls transparent because client side does not need any configuration.
Hence, every WWW requests through VPN need go to transparent proxy.</p>

<p>This installation guide is tested on Ubuntu 14.04 64bit.
VPN is set up by <a href="http://en.wikipedia.org/wiki/Point-to-Point_Tunneling_Protocol">pptp</a>.
Transparent proxy is on <a href="http://www.squid-cache.org">Squid3</a>.</p>

<ul>
<li><strong>pptp installation</strong></li>
</ul>


<p>In terminal, type the command bellow to install pptp server:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install pptpd</span></code></pre></td></tr></table></div></figure>


<p>To restrict user access your VPN server, you also need to add users and passwords in <code>/etc/ppp/chap-secets</code>.
In the client column is user&rsquo;s name, the secret column is for passwords.
I masked mine for privacy.</p>

<p><img src="http://abnerchou.me/blog_pics/user_password.jpg" alt="Set user and password"/></p>

<p>Add the following DNS to <code>/etc/ppp/pptpd-options</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ms-dns 8.8.8.8
</span><span class='line'>ms-dns 8.8.4.4</span></code></pre></td></tr></table></div></figure>


<p>Restart pptp server by command <code>service pptpd restart</code>. Check if it is running by <code>netstat -alpn | grep :1723</code>.</p>

<p>You also should enable the IP forwarding on your pptp server.
This would transfer the package between public ip and private ips on your server.
Open <code>/etc/sysctl.conf</code>, add the following line if not exist: <code>net.ipv4.ip_forward = 1</code>.
Then run <code>sysctl -p</code> to make the change effective.</p>

<p>Create NAT rule for iptables, and your VPN is ready to use:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>iptables --table nat --append POSTROUTING -o eth0 -j MASQUERADE && iptables-save</span></code></pre></td></tr></table></div></figure>


<ul>
<li><strong>Squid3 installation</strong></li>
</ul>


<p>Similar to pptpd, typing the following in terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install squid
</span><span class='line'>update-rc.d squid3 defaults</span></code></pre></td></tr></table></div></figure>


<p>The proxy is usable, but it is the normal proxy.
To change it to transparent proxy, we need to edit the <code>/etc/squid3/squid.conf</code> file.
The squid.conf follows the rules of allow/deny order.
It obeys the first come first serve, the first matched rule will apply.
For example, if you put &ldquo;deny all&rdquo; at the first line of squid.conf, then the proxy denies all request.
If a rule does not indicate in squid.conf, then it defaults as deny.</p>

<p>First, find the line <code>http_port 3128</code>, change it to <code>http_port 3128 transparent</code>.</p>

<p>Second, add the following rules:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>acl myhost src 192.168.0.1
</span><span class='line'>http_access allow myhost
</span><span class='line'>acl mymachine src 10.0.0.0/16
</span><span class='line'>http_access allow mymachine</span></code></pre></td></tr></table></div></figure>


<p>The &lsquo;192.168.0.1&rsquo; is my public ip, and the &lsquo;10.0.0.0/16&rsquo; is my private ips.
Restart squid <code>sudo service squid3 restart</code>.</p>

<p>Finally, we set the iptables to redirect all the traffic through 80 port to 3128 port that is our transparent proxy.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>iptables -t nat -A PREROUTING -i ppp0 -p tcp -m tcp --dport 80 -j REDIRECT --to-port 3128</span></code></pre></td></tr></table></div></figure>


<p>The transparent proxy is set up.</p>

<ul>
<li><strong>Restore iptables rules while system start up</strong></li>
</ul>


<p>Right now, you couldn&rsquo;t restart the system, otherwise the iptables will be set to empty again.
But you can input the previous iptables commands again to solve this.</p>

<p>Here I introduce a method that will do it once and for all.</p>

<p>Save iptables into <code>/etc/network/iptables.rules</code> by <code>iptables-save &gt; /etc/network/iptables.rules</code></p>

<p>Open <code>/etc/rc.local</code> and add the following line before &ldquo;exit 0&rdquo;:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/sbin/iptables-restore &lt; /etc/network/iptables.rules</span></code></pre></td></tr></table></div></figure>


<p>Then our saved iptables rules will be loaded every time the system start up.</p>

<p>Enjoy your VPN server with transparent proxy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why Sun Is the Center of Our Solar System]]></title>
    <link href="http://abnerchou.me/blog/2014/07/02/why-sun-is-the-center-of-our-solar-system/"/>
    <updated>2014-07-02T22:44:44-04:00</updated>
    <id>http://abnerchou.me/blog/2014/07/02/why-sun-is-the-center-of-our-solar-system</id>
    <content type="html"><![CDATA[<p>Because our Earth is in a system called Solar System.
I don&rsquo;t think the answer would be simple as that.
Why the Earth could not be the center?</p>

<p>Actually it could.
As we learn in physic, all motions are relative, like we feel we are still on the Earth, but we actually spin and orbit the Sun.
Moreover, we orbit the Sun, in another words that the Sun also orbits us.
This doesn&rsquo;t conflict with motion relative law.
But why we are not saying the Sun is orbiting Earth?</p>

<p>So let&rsquo;s see how the planets move during heliocentric system and geocentric system.
Here is the link: <a href="http://noahdragon.github.io/SolarSystem.js/">SolarSystem.js</a>.
You could click to switch the systems, and draw the orbit path for better viewing.</p>

<p>The heliocentric system shows perfect concentric circles of planets path, in contrast, the geocentric system looks like random motion.
Untile we draw their path, only the Sun&rsquo;s orbit is circle, the other planet tracks are like spiral.
After long enough years, the orbit will look like below picture:</p>

<p><img src="http://abnerchou.me/blog_pics/geocentric.jpg" alt="Geocentric system orbits"/></p>

<p>It&rsquo;s totally mess!</p>

<p>This simulated program assumes the planets&#8217; orbit is circle and in the same surface.
In our real solar system, it is way more complicate.</p>

<p>I didn&rsquo;t do the history research about why heliocentrism won the theory battle.
But I know heliocentrism is better because it is simpler.
This also aligns with the philosophy of Unix/Linux programming:
K.I.S.S., which stands for &ldquo;Keep It Simple &amp; Straightforward&rdquo;.</p>

<p>Because of heliocentric system, we make satellite launch possible, and easily calculate the planets position.
Otherwise, I couldn&rsquo;t image how hard the job is for a mathematician to compute the correct route from the Earth to Mars.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Blog Here]]></title>
    <link href="http://abnerchou.me/blog/2014/03/11/my-first-blog-here/"/>
    <updated>2014-03-11T22:52:09-04:00</updated>
    <id>http://abnerchou.me/blog/2014/03/11/my-first-blog-here</id>
    <content type="html"><![CDATA[<p>Well, this is my first blog here (right now on github).</p>

<p>I&rsquo;m using the <a href="http://octopress.org">Octopress</a> as blog content management,
and I will briefly describe the way to set it up.</p>

<p>First, go to Octopress <a href="http://octopress.org/docs/setup/">setup page</a>.
Follow the instruction,
install the dependencies that Octopress will need.</p>

<p>Then choose the platform that the blog will be hosted on,
here is a link for <a href="http://octopress.org/docs/deploying/github/">deploying github pages</a>.
<strong>Note</strong>: an error occured while I followed the instruction to rake it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake aborted!
</span><span class='line'>You have already activated rake 10.1.0, but your Gemfile requires rake 0.9.6.
</span><span class='line'>Prepending <span class="sb">`</span>bundle <span class="nb">exec</span><span class="sb">`</span> to your <span class="nb">command </span>may solve this.
</span><span class='line'>/Users/Haochen/myBlog/octopress/Rakefile:2:in <span class="sb">`</span>&lt;top <span class="o">(</span>required<span class="o">)</span>&gt;<span class="err">&#39;</span>
</span><span class='line'><span class="o">(</span>See full trace by running task with --trace<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This error could be easily solved by adding <code>bundle exec</code> in front of the <code>rake</code> command.</p>

<p>After <code>rake generate</code>, go to &lsquo;_deploy&rsquo; folder, and type <code>git pull origin master</code>.
Then type <code>rake deploy</code>.
Otherwise, there will be some errors:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>error: failed to push some refs to <span class="s1">&#39;git@gihub.com:your github page repo&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, your blog page is on-line.
Although the pages are hosted on github,
you still need version control on your Octopress settings,
so don&rsquo;t forget to commit to the &lsquo;source&rsquo; branch.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add .
</span><span class='line'>git commit -m <span class="s1">&#39;your message&#39;</span>
</span><span class='line'>git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>


<p>(I&rsquo;d rather put them into a bash file than typing every time)</p>

<figure class='code'><figcaption><span>git_commit_source.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>!/bin/bash
</span><span class='line'>git add . <span class="o">&amp;&amp;</span>
</span><span class='line'>git commit -m <span class="s2">&quot;$1&quot;</span> <span class="o">&amp;&amp;</span> <span class="c">#first argument will be the commit message</span>
</span><span class='line'>git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure>


<p>To generate a blog page, you could use <code>rake new_post['blog name']</code>.
However, as I mentioned before the <code>rake</code> command wouldn&rsquo;t work properly if the ruby version didn&rsquo;t match.
We could use <code>bundle exec rake</code> to run the command.
Moreover, if you are using <strong>zsh shell</strong>, you should also add <code>noglob</code> in front of these command, because symbol &lsquo;[&rsquo; and &lsquo;]&rsquo; are reserved in zsh for regular expression.</p>

<p>Finally, my blog is here.
Much easier than I expected.
Using Octopress can save your time on setting a blog site, and it generates pages automatically.</p>

<p>This blog is still underconstruction. I would like to make it more simple and pretty.
K.I.S.S</p>

<p><strong>Update</strong> (several minutes later):
Encountered a problem of creating single page, e.g. 404.html.
The command <code>rake new-page['404']</code> cannot work on zsh due to &lsquo;[]&rsquo; is converted.
Hence, the only way to add cutomize page is to write a markdown file and put into &lsquo;source&rsquo; fold.
But, do not forget to add the following to the head of page:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>---
</span><span class='line'>layout: page
</span><span class='line'>title: <span class="s2">&quot;Super Awesome&quot;</span>
</span><span class='line'>date: 2011-07-03 5:59
</span><span class='line'>comments: <span class="nb">true</span>
</span><span class='line'>sharing: <span class="nb">true</span>
</span><span class='line'>footer: <span class="nb">true</span>
</span><span class='line'>---
</span></code></pre></td></tr></table></div></figure>


<p><strong>Update</strong> (2014-Mar-12):
<code>rake preview</code> has problem with Safari.
Don&rsquo;t know why but only show blank page while open <a href="http://localhost:4000">http://localhost:4000</a> .
Using Chrome or Firefox will solve this.[<a href="https://github.com/imathis/octopress/issues/1395">ref</a>]</p>

<p>Due to save typing, I have written some bash files:</p>

<figure class='code'><figcaption><span>deploy.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'>bundle <span class="nb">exec </span>rake generate <span class="o">&amp;&amp;</span>
</span><span class='line'>bundle <span class="nb">exec </span>rake deploy
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>preview.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="c"># set up the octopress preview</span>
</span><span class='line'><span class="c"># open http://localhost:4000 in Chrome</span>
</span><span class='line'><span class="c"># Safari has some wired error in it</span>
</span><span class='line'>
</span><span class='line'><span class="c"># if previous preview is running, stop it</span>
</span><span class='line'><span class="nv">preview_pid</span><span class="o">=</span><span class="sb">`</span>/bin/ps -fu <span class="nv">$USER</span>| grep <span class="s2">&quot;rake\ preview&quot;</span> | grep -v <span class="s2">&quot;grep&quot;</span> | awk <span class="s1">&#39;{print $2}&#39;</span><span class="sb">`</span>
</span><span class='line'><span class="nb">kill</span> -2 <span class="nv">$preview_pid</span>
</span><span class='line'>
</span><span class='line'>bundle <span class="nb">exec </span>rake generate <span class="o">&amp;&amp;</span>
</span><span class='line'>bundle <span class="nb">exec </span>rake preview &amp;
</span><span class='line'>
</span><span class='line'>sleep 5 <span class="c"># wait a while to make sure the preview already running</span>
</span><span class='line'>
</span><span class='line'><span class="c">#change the browser command if you are using a different OS and browser</span>
</span><span class='line'>/Applications/Google<span class="se">\ </span>Chrome.app/Contents/MacOS/Google<span class="se">\ </span>Chrome <span class="s1">&#39;http://localhost:4000&#39;</span>
</span><span class='line'>
</span><span class='line'>pidof <span class="s2">&quot;Google Chrome&quot;</span> | xargs <span class="nb">wait</span>
</span><span class='line'><span class="nv">preview_pid</span><span class="o">=</span><span class="sb">`</span>/bin/ps -fu <span class="nv">$USER</span>| grep <span class="s2">&quot;rake\ preview&quot;</span> | grep -v <span class="s2">&quot;grep&quot;</span> | awk <span class="s1">&#39;{print $2}&#39;</span><span class="sb">`</span>
</span><span class='line'><span class="nb">kill</span> -2 <span class="nv">$preview_pid</span>
</span><span class='line'><span class="c">#echo &quot;$preview_pid&quot;</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;Preview DONE!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Please ignore the text below, the latest code fixes all of them. :P</p>

<p><del><strong>Warnning</strong>:
This preview shell script may not work for you if you are a ruby developer,
or you are using some programs written or depended in/on ruby or ruby packages,
because it killed all ruby processes at the end.
Do not forget to fully quit Chrome (Comman+q in MacOS) before starting a new preview,
otherwise unknown error would occur (duplicate processes).</del></p>

<p><del>BTW, the preview.sh also left a messy terminal for you.
Well, everything have side effects.
But you could add <code>clear</code> command at the end of the script,
if you don&rsquo;t really care about the traces.</del></p>
]]></content>
  </entry>
  
</feed>
